name: CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
      fail-fast: false

    steps:
      - uses: actions/checkout@v5

      - name: Ensure requirements match constraints
        run: |
          if [ -f requirements.txt ] && [ -f constraints.txt ]; then
            while IFS= read -r line; do
              line=$(echo "$line" | xargs)
              [ -z "$line" ] && continue
              case "$line" in \#*) continue ;; esac
              if ! grep -Fxq "$line" constraints.txt; then
                echo "requirements.txt line '$line' not found in constraints.txt"
                exit 1
              fi
            done < requirements.txt
          fi

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install tools and deps (no package build)
        run: |
          python -m pip install --upgrade pip
          # якщо є requirements.txt/constraints.txt — встановимо
          if [ -f requirements.txt ]; then
            if [ -f constraints.txt ]; then
              pip install -r requirements.txt -c constraints.txt
            else
              pip install -r requirements.txt
            fi
          fi
          pip install pytest pytest-cov ruff mypy

      - name: Lint with ruff
        run: ruff check .

      - name: Type check with mypy
        run: |
          if [ -d "btcmi" ]; then
            mypy btcmi
          fi

      - name: Run schema freeze test
        env:
          PYTHONPATH: .
        run: pytest -q --disable-warnings --maxfail=1 tests/test_schema_freeze.py

      - name: Run tests with pytest
        env:
          PYTHONPATH: .
        run: pytest -q --disable-warnings --maxfail=1

      - name: Run end-to-end examples
        env:
          PYTHONPATH: .
        run: python examples/run_e2e.py
